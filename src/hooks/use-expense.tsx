import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import axios from "axios";
import { useAuth } from "@/context/auth-context";
import { ExpenseItemProps } from "@/types/expenses.types";
import { API_URL } from "@/constants";

const apiUrl = `${API_URL}/api/expenses`;

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –ø–æ ID
const fetchExpenseById = async (documentId: string, token: string): Promise<ExpenseItemProps> => {
    if (!token) throw new Error("Authentication token is missing");
    const response = await axios.get(`${apiUrl}/${documentId}?populate=*`, {
        headers: { Authorization: `Bearer ${token}` },
    });
    return response.data.data;
};

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞
const createExpense = async ({
    expense,
    token,
}: {
    expense: Partial<ExpenseItemProps>;
    token: string;
}): Promise<ExpenseItemProps> => {
    if (!token) throw new Error("Authentication token is missing");
    const response = await axios.post(
        apiUrl,
        { data: expense },
        {
            headers: { Authorization: `Bearer ${token}` },
        }
    );
    return response.data.data;
};

// üîπ –•—É–∫ `useExpense` ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –ø–æ ID
export const useExpense = (documentId: string) => {
    const { token } = useAuth();
    return useQuery<ExpenseItemProps, Error>({
        queryKey: ["expense", documentId],
        queryFn: () => {
            if (!token) return Promise.reject(new Error("Authentication token is missing"));
            return fetchExpenseById(documentId, token);
        },
        enabled: !!token && !!documentId, // –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ ID –¥–æ—Ö–æ–¥–∞
    });
};

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
const updateExpense = async ({
    documentId,
    updatedData,
    token,
}: {
    documentId: string;
    updatedData: Partial<ExpenseItemProps>;
    token: string;
}): Promise<ExpenseItemProps> => {
    if (!token) throw new Error("Authentication token is missing");
    const response = await axios.put(
        `${apiUrl}/${documentId}`,
        { data: updatedData },
        {
            headers: { Authorization: `Bearer ${token}` },
        }
    );
    return response.data.data;
};

// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
const deleteExpense = async ({
    documentId,
    token,
}: {
    documentId: string;
    token: string;
}): Promise<string> => {
    if (!token) throw new Error("Authentication token is missing");
    await axios.delete(`${apiUrl}/${documentId}`, {
        headers: { Authorization: `Bearer ${token}` },
    });
    return documentId;
};

// üîπ –•—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
export const useExpenseMutations = () => {
    const { token } = useAuth();
    const queryClient = useQueryClient();

    const createExpenseMutation = useMutation<ExpenseItemProps, Error, Partial<ExpenseItemProps>>({
        mutationFn: (expense) => createExpense({ expense, token: token ?? "" }),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ["expenses"] }); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤
        },
    });

    const updateExpenseMutation = useMutation<ExpenseItemProps, Error, { documentId: string; updatedData: Partial<ExpenseItemProps> }>({
        mutationFn: ({ documentId, updatedData }) => updateExpense({ documentId, updatedData, token: token ?? "" }),
        onSuccess: (updatedExpense) => {
            queryClient.setQueryData<ExpenseItemProps>(["expense", updatedExpense.documentId], updatedExpense);
            queryClient.invalidateQueries({ queryKey: ["expenses"] }); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤
        },
    });

    const deleteExpenseMutation = useMutation<string, Error, string>({
        mutationFn: (documentId) => deleteExpense({ documentId, token: token ?? "" }),
        onSuccess: (deletedDocumentId) => {
            queryClient.invalidateQueries({ queryKey: ["expenses"] }); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤
            queryClient.removeQueries({ queryKey: ["expense", deletedDocumentId] }); // –£–¥–∞–ª—è–µ–º –∫–µ—à –æ–¥–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
        },
    });

    return {
        createExpense: createExpenseMutation.mutate,
        updateExpense: updateExpenseMutation.mutate,
        deleteExpense: deleteExpenseMutation.mutate,
    };
};
